'use strict'

const urlGeo =
  "https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/counties.json";
const urlEdu =
  "https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/for_user_education.json";

// map svg sizing
const w = 1060;
const h = 600;

// create main svg
const svg = d3
  .select("main")
  .append("svg")
  .attr("id", "map-svg")
  .attr("width", w)
  .attr("height", h);

// create tooltip element
const tooltip = d3
  .select("body")
  .append("div")
  .attr("id", "tooltip")
  .style("opacity", 0);
  
// load in data
Promise.all([
  d3.json(urlGeo),
  d3.json(urlEdu)
]).then(files => {
  const geoData = files[0];
  const eduData = files[1];
  const statesFeatures = topojson.feature(geoData, geoData.objects.states).features;
  const countiesFeatures = topojson.feature(geoData, geoData.objects.counties).features;
  const path = d3.geoPath();

// create threshold scale
  const numColors = 8;
  const color = d3
    .scaleThreshold()
    .domain([6,12,18,24,30,40,50])
    .range(d3.schemeBrBG[numColors])
  
// cross reference data files by id. find data entry and return key value if specified 
// otherwise return the matched data entry
// implements memoization for better performance on repeated calls on the same id
  let memoMap = new Map();
  
  function getValueOf (id, key) {
    let found = "data not found";
    if (memoMap.has(id)) { 
      found = memoMap.get(id);
    } else {
      found = eduData.filter(x => x.fips === id)[0];
      memoMap.set(id, found);
    }
    return arguments[1] ? found[key] : found;
  }
  
// add representation for data points
  const counties = svg.selectAll("path")
  counties
    .data(countiesFeatures)
    .enter()
    .append("path")
    .attr("class", "county")
    .attr("d", path)   
    .attr("data-fips", d => d.id)
    .attr("data-education", d => getValueOf(d.id, "bachelorsOrHigher"))
    .style("fill", d => color(getValueOf(d.id, "bachelorsOrHigher")))
  
//  add event listeners
    .on("mouseover", d => {
      tooltip
        .style("opacity", 0.85)
        .attr("data-education", getValueOf(d.id, "bachelorsOrHigher"));
    
      const getTooltipLeftOffset = () => {
        const posX = d3.event.pageX;
        const screenWidth = window.innerWidth;
        return posX < screenWidth - 250 ? posX + 20 + "px" : posX - 220 + "px"
      }
      tooltip
        .html(formatDataHTML(d))
        .style("top", d3.event.pageY - 75 + "px")
        .style("left", getTooltipLeftOffset())
        .style("border", "4px solid " + color(getValueOf(d.id, "bachelorsOrHigher")))
    })
    .on("mouseout", d => {
      tooltip
        .style("opacity", 0)        
    });
         
// create HTML for the tooltip 
  function formatDataHTML(d) {
    const data = getValueOf(d.id);
    const f1 = d3.format(".1f")
    return `<table>
              <tr>
                <td colspan="2">${data.area_name}, ${data.state}</td>
              </tr>
              <tr>
                <th>Bachelor or higher: </th><td>${f1(data.bachelorsOrHigher)} %</td>
              </tr>
            </table>`
  }
  
// draw state borders
  const states = svg.append("path")
                    .attr("class", "state")
  states
    .datum(topojson.mesh(geoData, geoData.objects.states), (a, b) => a !== b)
    .attr("d", path)
    .attr("stroke", "SlateGray")
    .attr("stroke-width", 1)
    .attr("fill", "none")
  
// create scale for legend
  const y = d3.scaleLinear()
      .domain([0, 64])
      .range([360, 0]); // the axis should be flipped

  const yAxis = d3.axisRight(y)
      .tickValues(color.domain())
      .tickSize(0)
      .tickPadding(24)
      .tickFormat(t => t + " %")
  
  const g = svg
              .append("g")
              .attr("id", "legend")
              .attr("transform", "translate(1000, 160)")
              .call(yAxis);
  
  g.select(".domain").remove(); // remove the axis domain line

// add colors to the legend 
  // create an array that holds the start and end (domain) value of each threshold class
  g.selectAll("rect")
    .data(color.range().map(c => {
      const d = color.invertExtent(c)
      if (!d[0]) d[0] = y.domain()[0] // complete the boundary pair
      if (!d[1]) d[1] = y.domain()[1] // for first and last threshold
      return d
    }))
    .enter()
    .insert("rect", ".tick")
    .attr("y", d => {
      return y(d[0]) - getScaledHeight(d[0], d[1]) // lower boundary - height
    })
    .attr("height", d => getScaledHeight(d[0], d[1])) // height
    .attr("width", 16)
    .attr("fill", d => color(d[0]))
    .attr("stroke", "black")
    
  function getScaledHeight(y1, y2) {
    return Math.abs(y(y2) - y(y1))
  }
    
});